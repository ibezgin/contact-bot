import re

from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, CommandStart, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, callback_query

from keyboards.inline import get_callback_btns
from keyboards.reply import get_keyboard

user_private_router = Router()


# noinspection PyTypeChecker
@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!üëã\n\n–Ø - —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –∏ "
        "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –æ–≥—Ä–æ–º–Ω–æ–π –ª—é–±–æ–≤—å—é —Å–æ–∑–¥–∞–≤–∞–ª–∏ –º–µ–Ω—è, —á—Ç–æ–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å "
        "–Ω–µ–ø—Ä–æ—Å—Ç–æ–π –ø—É—Ç—å –∫ –Ω–∞—Å—Ç–æ—è—â–µ–π –¥—Ä—É–∂–±–µ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ–º—É –æ–±—â–µ–Ω–∏—é.\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö "
        "–∑–Ω–∞–∫–æ–º—ã—Ö, –æ–±–º–µ–Ω—è—Ç—å—Å—è –º—ã—Å–ª—è–º–∏, –¥–µ–ª–∏—Ç—å—Å—è —Ä–∞–¥–æ—Å—Ç—å—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –î–æ–≤–µ—Ä—å—Å—è –º–Ω–µ, "
        "–∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã—Ç—å—Å—è –≤ –Ω–æ–≤—ã—Ö –≤–∑–≥–ª—è–¥–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.\n\n"
        "–î–∞–≤–∞–π –≥–æ–≤–æ—Ä–∏—Ç—å, —Å–ª—É—à–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ —Å–≤—è–∑–∏. "
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –º–µ–Ω—è, –∏ –ø—É—Å—Ç—å –∫–∞–∂–¥–æ–µ –æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–ª—è —Ç–µ–±—è –æ—Å–æ–±–µ–Ω–Ω—ã–º –∏ —Ü–µ–Ω–Ω—ã–º! üí¨‚ú®",
        reply_markup=get_keyboard(
            "–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É",
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            sizes=(1,)
        ),
    )


# noinspection PyTypeChecker
class Form(StatesGroup):
    age = State()
    gender = State()
    name = State()
    city = State()
    purpose = State()
    WaitingForYesNo = State()
    image = State()
    contact = State()

    texts = {
        'Form:age': '–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–Ω–æ–≤–æ:',
        'Form:gender': '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∑–∞–Ω–æ–≤–æ:',
        'Form:name': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–Ω–æ–≤–æ:',
        'Form:city': '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ:',
        'Form:purpose': '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∑–∞–Ω–æ–≤–æ:',
        'Form:WaitingForYesNo': '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?',
        'Form:image': '–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ',
        'Form:contact': '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–Ω–æ–≤–æ:',
    }
    keyboards = {
        'Form:age': get_keyboard("–û—Ç–º–µ–Ω–∞",
                                 placeholder="–í—ã–±–µ—Ä–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç",
                                 sizes=(1,)),
        'Form:gender': get_keyboard("–ú—É–∂—Å–∫–æ–π",
                                    "–ñ–µ–Ω—Å–∫–∏–π",
                                    "–û—Ç–º–µ–Ω–∞",
                                    "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª",
                                    sizes=(2, 1)),
        'Form:name': get_keyboard("–û—Ç–º–µ–Ω–∞",
                                  "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                                  placeholder="–í–≤–µ–¥–∏ –∏–º—è",
                                  sizes=(1,)),
        'Form:city': get_keyboard("–û—Ç–º–µ–Ω–∞",
                                  "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                                  placeholder="–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥",
                                  sizes=(1,)),
        'Form:purpose': get_keyboard("–ø–æ–∏—Å–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
                                     "–ø—Ä–æ—Å—Ç–æ –æ–±—â–µ–Ω–∏–µ",
                                     "–û—Ç–º–µ–Ω–∞",
                                     "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                                     placeholder="–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
                                     sizes=(2, 1)),
        'Form:WaitingForYesNo': get_keyboard("–î–∞",
                                             "–ù–µ—Ç",
                                             "–û—Ç–º–µ–Ω–∞",
                                             "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                                             placeholder="–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
                                             sizes=(2, 1)),
        'Form:image': get_keyboard("–û—Ç–º–µ–Ω–∞",
                                   "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                                   placeholder="–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
                                   sizes=(2, 1)),
        'Form:contact': get_keyboard("–û—Ç–º–µ–Ω–∞",
                                     "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                                     placeholder="–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏",
                                     sizes=(1,)),
    }


# noinspection PyTypeChecker
@user_private_router.message(StateFilter(None),
                             or_f(Command('create-form'), F.text.lower().contains("—Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")))
async def create_form(message: types.Message, state: FSMContext):
    await message.answer("–ö–ª–∞—Å—Å! –¢—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º! –ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã",
                         reply_markup=types.ReplyKeyboardRemove())
    await message.answer("1 –≤–æ–ø—Ä–æ—Å: —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
                         reply_markup=get_keyboard(
                             "–û—Ç–º–µ–Ω–∞",
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç",
                             sizes=(1,)))
    await state.set_state(Form.age)


# noinspection PyTypeChecker
@user_private_router.message(StateFilter('*'), Command("–æ—Ç–º–µ–Ω–∞"))
@user_private_router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=get_keyboard(
        "–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É",
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        sizes=(1,)))


@user_private_router.message(StateFilter('*'), Command("–ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å"))
@user_private_router.message(StateFilter('*'), F.text.casefold() == "–ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å")
async def back_step_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state == Form.age:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –±—ã–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç.')
        return

    previous = None
    for step in Form.__all_states__:
        if step.state == current_state:
            if previous is not None:
                await state.set_state(previous)
                question_text = Form.texts.get(previous.state, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                keyboard = Form.keyboards.get(previous.state)
                await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É \n {Form.texts[previous.state]}",
                                     reply_markup=keyboard)
                return
        previous = step


# noinspection PyTypeChecker
@user_private_router.message(Form.age, F.text)
async def add_age(message: types.Message, state: FSMContext):
    age = int(message.text)
    if age < 16:
        await message.answer("–ò–∑–≤–∏–Ω–∏, —Ç–æ–ª—å–∫–æ –ª—é–¥—è–º –±–æ–ª—å—à–µ 16 –ª–µ—Ç.")
        return

    await state.update_data(age=message.text)
    await message.answer("2 –≤–æ–ø—Ä–æ—Å: –∫–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?", reply_markup=get_keyboard(
        "–ú—É–∂—Å–∫–æ–π",
        "–ñ–µ–Ω—Å–∫–∏–π",
        "–û—Ç–º–µ–Ω–∞",
        "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª",
        sizes=(2, 1)))
    await state.set_state(Form.gender)


@user_private_router.message(Form.age)  # –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ä–µ—à–∏—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥—É—é —Ö—Ä–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ
async def add_age2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç.")


# noinspection PyTypeChecker
@user_private_router.message(Form.gender, F.text)
async def add_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("3 –≤–æ–ø—Ä–æ—Å: –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=get_keyboard(
        "–û—Ç–º–µ–Ω–∞",
        "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
        placeholder="–í–≤–µ–¥–∏ –∏–º—è",
        sizes=(1,)))
    await state.set_state(Form.name)


@user_private_router.message(Form.gender)  # –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ä–µ—à–∏—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥—É—é —Ö—Ä–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–æ–ª–µ
async def add_gender2(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–æ–¥–∏—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª")


# noinspection PyTypeChecker
@user_private_router.message(Form.name, F.text)
async def add_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("4 –≤–æ–ø—Ä–æ—Å: –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=get_keyboard(
        "–û—Ç–º–µ–Ω–∞",
        "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
        placeholder="–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥",
        sizes=(1,)))
    await state.set_state(Form.city)


@user_private_router.message(Form.name)  # –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ä–µ—à–∏—Ç —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏–º–µ–Ω–∏
async def add_name2(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∏–º—è")


# noinspection PyTypeChecker
@user_private_router.message(Form.city, F.text)
async def add_city(message: types.Message, state: FSMContext):
    x = re.compile(r'[–∞-—è–ê-–Øa-zA-Z]+')
    z = message.text
    if not x.match(z):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã")
    else:
        await state.update_data(city=message.text)
        await message.answer("5 –≤–æ–ø—Ä–æ—Å: –∑–∞—á–µ–º —Ç–µ–±–µ —ç—Ç–∞ –∞–Ω–∫–µ—Ç–∞?", reply_markup=get_keyboard(
            "–ø–æ–∏—Å–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
            "–ø—Ä–æ—Å—Ç–æ –æ–±—â–µ–Ω–∏–µ",
            "–û—Ç–º–µ–Ω–∞",
            "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
            placeholder="–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
            sizes=(2, 1)))
        await state.set_state(Form.purpose)


# noinspection PyTypeChecker
@user_private_router.message(Form.purpose, F.text)
async def question(message: types.Message, state: FSMContext):
    await state.update_data(purpose=message.text)
    await message.answer("–î–æ–±–∞–≤–∏–º —Ñ–æ—Ç–æ?", reply_markup=get_keyboard(
        "–î–∞",
        "–ù–µ—Ç",
        "–û—Ç–º–µ–Ω–∞",
        "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
        placeholder="–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
        sizes=(2, 1)))
    await state.set_state(Form.WaitingForYesNo)


# noinspection PyTypeChecker
@user_private_router.message(Form.WaitingForYesNo, F.text)
async def process_yes_no(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ(–¥–æ 3)", reply_markup=get_keyboard(
            "–û—Ç–º–µ–Ω–∞",
            placeholder="–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ",
            sizes=(1,)))
        await state.set_state(Form.image)
    elif message.text.lower() == "–Ω–µ—Ç":
        await state.update_data(image=message.text)
        await message.answer("–û–ö, —Ç–æ–≥–¥–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç —à–∞–≥.")
        await message.answer("–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏?", reply_markup=get_keyboard(
            "–û—Ç–º–µ–Ω–∞",
            "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
            placeholder="–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏",
            sizes=(1,)))
        await state.set_state(Form.contact)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç")


# noinspection PyTypeChecker
@user_private_router.message(Form.image, F.photo)
async def add_image(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    uploaded_images = user_data.get("uploaded_images", [])

    if len(uploaded_images) < 3:
        uploaded_images.append(message.photo[-1].file_id)
        await state.update_data(uploaded_images=uploaded_images)
        await message.answer(
            f"–§–æ—Ç–æ {len(uploaded_images)} –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ skip –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

        if len(uploaded_images) == 3:
            await message.answer("–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏?", reply_markup=get_keyboard(
                "–û—Ç–º–µ–Ω–∞",
                "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                placeholder="–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏",
                sizes=(1,)))
            await state.set_state(Form.contact)
    else:
        await message.answer("–£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ.")


# noinspection PyTypeChecker
@user_private_router.message(or_f(Command("skip"), F.text.lower().contains("skip")), Form.image)
async def skip_image_upload(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    await message.answer("–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏?", reply_markup=get_keyboard(
        "–û—Ç–º–µ–Ω–∞",
        "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
        placeholder="–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏",
        sizes=(1,)))
    await state.set_state(Form.contact)


@user_private_router.message(Form.purpose)
async def add_purpose2(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç")


# noinspection PyTypeChecker
@user_private_router.message(Form.contact, F.text)
async def add_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await message.answer("–ì–æ—Ç–æ–≤–æ! –ù–∞—á–Ω—ë–º –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?", reply_markup=get_keyboard(
        "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É",
        "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        sizes=(2, 1)))
    data = await state.get_data()
    images_info = data.get('image', '')
    if 'uploaded_images' in data and data['uploaded_images']:
        images_info = ', '.join(data['uploaded_images'])
    profile_info = (
        "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
        f"–ò–º—è: {data['name']}\n"
        f"–ü–æ–ª: {data['gender']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–¶–µ–ª—å: {data['purpose']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
        f"–§–æ—Ç–æ: {images_info}\n"
    )
    await message.answer(profile_info)
    await state.clear()


@user_private_router.message(Form.purpose)
async def add_contact2(message: types.Message, state: FSMContext):
    await message.answer("–æ—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É")